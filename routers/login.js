const express=require("express");const pool=require("../config");const router=express.Router();router.post("/",(req,res)=>{const{id,username,uacceptcode}=req.body;if(!id){return res.status(400).json({success:false,message:"ID is required"});}
pool.getConnection((err,connection)=>{if(err){console.error("Error connecting to database:",err);return res.status(500).json({success:false,message:"Error connecting to the database"});}
const checkQuery="SELECT * FROM users WHERE uid = ?";connection.query(checkQuery,[id],(checkError,checkResults)=>{if(checkError){console.error("Error checking database:",checkError);return res.status(500).json({success:false,message:"Error checking the database"});}
if(checkResults.length>0){res.json({success:true,message:"User already exists",results:checkResults[0],});return;}
const inviteCode=Math.random().toString(36).substring(2,10).toUpperCase();if(uacceptcode){const insertrewards="INSERT INTO `user_rewards` (uid, RewardType, RewardEvent, RewardSkull) VALUES (?,?,?,?)"
const insertQuery="INSERT INTO users (uid, uname, uinvitecode, uacceptcode, skull) VALUES (?,?,?,?,?)";const searchsql=`SELECT uid FROM users WHERE uinvitecode = ?`;const updateskull="UPDATE users SET skull = skull + 1161850,uboneid = CASE WHEN uboneid + 1 > 16 THEN 16 ELSE uboneid + 1 END WHERE uid = ?";const updatemgs="INSERT INTO `user_rewards` (uid, RewardType, RewardEvent, RewardSkull) VALUES (?,?,?,?)";connection.query(searchsql,[uacceptcode],(err,results)=>{if(err){console.error("Error checking database:",err);return res.status(500).json({success:false,message:"Error checking the database"});}
const uid=results[0].uid;connection.query(updateskull,[uid],(err,results)=>{if(err){console.error("Error checking database:",err);return res.status(500).json({success:false,message:"Error checking the database"});}
connection.query(updatemgs,[uid,2,"Share",1161850],(insertError,insertResults)=>{if(insertError){console.error("Error inserting into database:",insertError);return res.status(500).json({success:false,message:"Error inserting into the database",});}
connection.query(insertQuery,[id,username,inviteCode,uacceptcode,521880],(insertError,insertResults)=>{if(insertError){console.error("Error inserting into database:",insertError);return res.status(500).json({success:false,message:"Error inserting into the database",});}
connection.query(insertrewards,[id,1,"Register",512880],(insertError,insertResults)=>{if(insertError){console.error("Error inserting into database:",insertError);return res.status(500).json({success:false,message:"Error inserting into the database",});}
connection.query(checkQuery,[id],(err,results)=>{if(err){console.error("Error checking database:",err);return res.status(500).json({success:false,message:"Error checking the database"});}
res.json({success:true,message:"User created successfully",results:results[0]});})});});});})})}else{const insertrewards="INSERT INTO `user_rewards` (uid, RewardType, RewardEvent, RewardSkull) VALUES (?,?,?,?)"
const insertQuery="INSERT INTO users (uid, uname, uinvitecode, skull) VALUES (?,?,?,?)";connection.query(insertQuery,[id,username,inviteCode,512880],(insertError,insertResults)=>{if(insertError){console.error("Error inserting into database:",insertError);return res.status(500).json({success:false,message:"Error inserting into the database",});}
connection.query(insertrewards,[id,1,"Register",512880],(insertError,insertResults)=>{if(insertError){console.error("Error inserting into database:",insertError);return res.status(500).json({success:false,message:"Error inserting into the database",});}
connection.query(checkQuery,[id],(err,results)=>{if(err){console.error("Error checking database:",err);return res.status(500).json({success:false,message:"Error checking the database"});}
res.json({success:true,message:"User created successfully",results:results[0]});})});});}});pool.releaseConnection(connection);});});module.exports=router;