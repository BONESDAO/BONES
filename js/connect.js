import{WalletTgSdk}from'https://cdn.jsdelivr.net/npm/@uxuycom/web3-tg-sdk'
let have=false
const{ethereum}=new WalletTgSdk({injected:true});console.log(ethereum);let platon={chainId:'0x335f9',chainName:'PlatON Mainnet',nativeCurrency:{name:'LAT',symbol:'lat',decimals:18},rpcUrls:['https://openapi2.platon.network/rpc'],blockExplorerUrls:['https://scan.platon.network']};window.ethereum
const statue=ethereum.isConnected();console.log(statue);const wallet=document.querySelector(".wallet");wallet.addEventListener("click",connectWallet);async function connectWallet(){try{const accounts=await ethereum.request({method:'eth_requestAccounts'});await swap(platon);wallet.innerHTML=abbreviateString(accounts[0],5,4);wallet.style.pointerEvents='none';console.log('Connected to wallet:',accounts[0]);}catch(error){console.error('Failed to connect to wallet:',error);}}
async function getChainId(){try{const chainId=await ethereum.request({method:'eth_chainId'});console.log('Current chain ID:',chainId);return chainId;}catch(error){console.error('Failed to get chain ID:',error);}}
async function getAccounts(){try{const accounts=await ethereum.request({method:'eth_accounts'});console.log('Current address:',accounts[0]);return accounts[0];}catch(error){console.error('Failed to get address:',error);}}
ethereum.on('accountsChanged',(accounts)=>{console.log('Active account changed:',accounts[0]);});ethereum.on('chainChanged',(chainId)=>{console.log('Network changed to:',chainId);});function abbreviateString(str,frontLen=4,backLen=3){if(str.length<=frontLen+backLen){return str;}
const frontPart=str.substring(0,frontLen);const backPart=str.substring(str.length-backLen);return`${frontPart}...${backPart}`;}
async function swap(targetChain){const currentChainId=await ethereum.request({method:"eth_chainId"});console.log(currentChainId);if(currentChainId!==targetChain.chainId){try{await ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:targetChain.chainId}],});console.log(`Switched to network: ${targetChain.chainName}`);}catch(switchError){if(switchError.code===4902){try{await ethereum.request({method:"wallet_addEthereumChain",params:[{chainId:targetChain.chainId,chainName:targetChain.chainName,nativeCurrency:targetChain.nativeCurrency,rpcUrls:targetChain.rpcUrls,blockExplorerUrls:targetChain.blockExplorerUrls,},],});console.log(`Network added successfully: ${targetChain.chainName}`);}catch(addError){console.error("Error adding network:",addError);}}else{console.error("Error switching network:",switchError);}}}else{console.log('Already on the target network');}}